Compiler Construction: Principles and Practice

	Chapter 2: Scanning

		2.1 The Scanning Process

			- Scanner generates tokens
				- Tokens: enumerated types that fall into different categories
					* reserved words [if, then, else]
					* special symbols [+, -]
					* representative tokens: Capable of representing different string [NUM, ID]

			- Lexeme: the String Value represented by a token
				- Attribute: any value associated with a token [ex. String Value]

		2.2 Regular Expressions

			Regular Exrpession: Patterns of Strings and characters

				A regular expression r is defined by the set of strings it matches.
				This set is called the language generated by the regular expression.
				This is written as L(r).

			Language: the set of characters available in a set where the elements of
				the set are called symbols. The set of legalsymbols available is 
				called the alphabet and is represented by the symbol sigma (Σ).

			Metacharacter/Metasymbols: Characters with special meaning in a regular expression

		2.2.1 Definition of Regular Expressions

			Basic Regular Expression: Single characters L(a) = {a}
				Need to be able to recognize the "empty string." This is denoted by 
				epsilon (ε) where the metasymbol is defined as L(ε) = {ε}
				Additionally, some symbols cannot match any string and is
				written as the empty set {}

				Empty Set notation: Phi (Φ) is used to denote this in the
					form L(Φ) = {}

			Regular Expression Operators:
				Choice among alternatives: Denoted by vertical bar |  [lowerst precedence]
					ex.) Regular Expression r and s. To find language matched by either r or s, we write r|s.
						This allows us to find the Union between the language of r and language of s
						L(r|s) = L(r) U L(s) = {r,s}

				Concatenation:
					Indicated with juxtaposition without a character [second highest precedence]
						ex.) L((a|b)c) = L(a|b)L(c) = {a, b}{c} = {ac, bc}.

				Repetition or "Closure":
					Indicated with a * symbol [highest precedence]
						ex.) L(r*) = L(r)*  = ε U r U rr U rrr U rrrr etc.

				Naming Regular Expressions:
					if we wanted a potential string of digits we could write (0|1|2|3|4|5|6|7|8|9)*
					or we could write digit digit*
						where digit is defined using its REGULAR DEFINITION as digit = 0|1|2|...|9

					Look up "pumping lemma" about (automata theory) for regular expression reptition

				Ranges are available as well; ex.) [a-zA-z]; [0-9]
				NOT is defined as ~ or ^ (for Lex)

		2.2.3 Regular Expressions for Programming Language Tokens

			Fall into three categories generally:
				- reserved words/keywords
				- identifiers
				- literals/constants

			can be defined in the following ways:

				reserved = if | while | else | do | ...

				letter = [a-zA-z]
				digit =  [0-9]
				idenitfier = letter(letter|digit)*

				 whitespace = comments | space | tab | newline